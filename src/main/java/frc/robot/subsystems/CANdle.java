// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

/*
package frc.robot.subsystems;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.CANdleConfiguration;
import com.ctre.phoenix.led.CANdleFaults;

public class CANdle {

  // Example usage of a CANdle
  CANdle candle = new CANdle(); // creates a new CANdle with ID 0

  CANdleConfiguration config = new CANdleConfiguration();

  config.stripType = LEDStripType.GRB; // set the strip type to GRB
  config.brightnessScalar = 0.5; // dim the LEDs to half brightness
  candle.configAllSettings(config);

  // candle.setLEDs(255, 255, 255); // set the CANdle LEDs to white

  int colorWiring(
      int c) { // Some code pulled from Github to convert RGB values to GRB ones; untested
    int red = (c & 0xFF0000) >> 16;
    int green = (c & 0x00FF00) >> 8;
    int blue = (c & 0x0000FF);
    int[] gammatable;
    red = gammatable[red];
    green = gammatable[green];
    blue = gammatable[blue];
    return (green << 16) | (red << 8) | (blue);
  }

  // create a rainbow animation:
  // - max brightness
  // - half speed
  // - 64 LEDs
  RainbowAnimation rainbowAnim = new RainbowAnimation(1, 0.5, 64);
  candle.animate(rainbowAnim);

  ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle
  CANdleFaults faults = new CANdleFaults();
  ErrorCode faultsError = candle.getFaults(faults);

  private ErrorCode getLastError() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getLastError'");
  }

  private ErrorCode getFaults(CANdleFaults faults2) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getFaults'");
  } // fills faults with the current CANdle faults; returns the last error generated
}
*/